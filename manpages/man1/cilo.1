.TH cilo 1 "23 July 2018" "version 1.0"
.SH NAME
Cilo -  CI (Continuous Integration) Local
 Pronounced silo
.SH USAGE
.PP
.B cilo
.R [OPTIONS]
.B run
.R <pipeline>
.PP
.B cilo
.R [OPTIONS]
.B help
.R [command]
.PP
.B cilo
.R [OPTIONS]
.B version
.PP
.B cilo
.R [OPTIONS]
.B shell
.PP
.B cilo
.R [OPTIONS]
.B secret
.SH            DESCRIPTION
.PP
Cilo is a local and decentralized CI/CD build tool. 
It can be used to either build software projects or 
deploy application infrasturcture without having to worry about 
the underlying operating system. Most CI/CD tools take a 
centralized approach to deployments; this is problematic because 
deployments must be centrally managed adding to cost (money/time) and 
reducing the developer's visibilty into deployments.
.PP
Cilo uses a local docker container to isolate builds and deployments. 
All while loading secrets from a cilo server credential store or 
the local host machine. Logs and build information can also be 
transmitted to a centrallized cilo server for CO (continuous operation).
.SH            OPTIONS
.PP
\" .B -d|--docker-socket <docker-socker-filepath>
\"         Use custom docker socket for communicating with docker.
\"         DEFAULT:   /var/run/docker.sock
\"         NOTE:      Follows same rules as --unix-socket from curl.
\" .PP
.B -i|--image <image-name>
        Name of docker image used to build.
        DEFAULT:   cilo
        NOTE:      Must inherit from cilo's image.
.PP
\" .B --interactive|--no-interactive
\"         Runs the project in interactive mode
\"         DEFAULT:   --interactive
\" .PP
.B -h|--help|--usage
        Show usage

.B -l|--library <cilo-library-path>
          will load additional build libraries with the 
        ".cilo" extension from this path.
        DEFAULT:   cilib/
        NOTE:      Must be relative to project with no leading slash and must have a trailing slash.
.PP
.B --pull
        Rebuilds or pulls latest docker image.
.PP
\" .B -r|--registry <image-registry-url>
\"         Use to get image from a differenct registry
\" .PP
.B -s|--server <cilo-server-url>
       URL of your cilo server.
.PP
.B -u|--url-library <shared-library-url>
       Download and use a shared library from a url. 
.PP
.B -q|--quite
       Silences additional output.
.PP
.SH            DETAILS
.PP
Cilo operates on what's called a cilo "run". Each run has a corrisponding cilo file.
This file is written in a language called "cilo" as a seamless combination between Bash and
a Groovy DSL.
.PP
Here is a sample script called "depoy.cilo":
.PP
.RS
    def tag = "${PROJECT_NAME}-${GIT_COMMIT}"
    def checkStatus(stdOut, stdErr, exitCode) {
      if (exitCode != 0) {
         fail "${stdErr}"
      }
    }   

    step("build") {
      println """Building [${PROJECT_NAME}] from git branch [${GIT_BRANCH}] and commit [${GIT_COMMIT}]"""
      $ ./gradlew clean assemble
      checkStatus stdOut, stdErr, exitCode
      def environment = ["TAG":"${tag}"]
      env(environment) {
        $ docker build -t "$TAG" . 
        checkStatus stdOut, stdErr, exitCode
      }
    }

    step("deploy") {
      secret("awsAutomationToken") {
        def imageName = awsSendToECR(awsAutomationToken, "${PROJECT_NAME}", "${BUILD_NUMBER}")
        deployToECS(awsAutomationToken, imageName)
      }
    }
.RE
.PP
This run revolves arount a built-in function called step. Above there are two steps,
one called "build" and one called "deploy".
.PP
Notice bash and groovy are integrated together in cilo. A bash command or script can 
be run by prefixing a line with a dollar sign. Groovy variables can be passed as script 
variables by using the built-in function called "env". Each set of bash commands returns
a variable for their stdOut, stdErr and last exitCode.
.PP
Secrets can be made available to a certain scope by using the built-in "secret" function.
In the case of the deploy step, it has access to a secret by the name of awsAutomationToken.
Inside of this scope their are three new variables: awsAutomationToken, awsAutomationTokenBytes and
awsAutomationTokenFile. Having a secret in a string is nice; but other forms are for when there
is a need to have binary data accessible also. These variables are availible in groovy and bash.
.SH            SECRET USAGE
.B cilo
.R [OPTIONS]
.B secret create
.R <name> (
.B string
.R <string> |
.B file
.R <file> |
.B input )
.PP
.B cilo
.R [OPTIONS]
.B secret read
.R <name>
.PP
.B cilo
.R [OPTIONS]
.B secret update
.R <name> (
.B string
.R <string> |
.B file
.R <file> |
.B input )
.PP
.B cilo
.R [OPTIONS]
.B secret delete
.R <name>
.PP
.SH            SECRET DESCRIPTION
.PP
Cilo has the ability to manage two types of secrets.
Local secrets and organization secrets.
Local secrets are managed exclusivly by these usage options which
corrispond with typical CRUD operations:
(create, read, update and delete).
.PP
These types of secrets are for personal use or for a small number of
individuals. They are stored locally on your machine in an encrypted form
and are encrypted again using a random key that is used for only one cilo run.
A secret is only unencrypted in memory (or file based on secret file usage) for
the durration of a cilo secret block:
.PP
.RS
    secret("secret-name") {...}
.RE
.PP
When the secret block exits that particular unencrypted version of 
a secret is lost. Once the docker container exits the randomly generated 
key is release from memory. All secrets are masked out (*******) from
local and remote logging.
.SH            SECRET COMMAND SUMMARY

.IP \[bu] 2
.B LIST
.PP
cilo secret 
.B list
        List all local secrets by name.
.IP \[bu] 2
.B CREATE
.PP
cilo secret 
.B create
.R <name>
.B string
.B <string>
.PP
cilo secret 
.B create
.R <name>
.B file
.R <file>
.PP
cilo secret 
.B create
.R <name>
.B input
.PP
        Creates a local secret. Which can be taken from:
               Command Line Argument
               Input Filename
               Standard Input
.IP \[bu] 2
.B READ
.PP
cilo secret 
.B read
.R <name>
.PP
        Writes the unencrypted secret from <name> to StdOut.
.IP \[bu] 2
.B UPDATE
.PP
cilo secret 
.B update
.R <name>
.B string
.R <string>
.PP
cilo secret 
.B update
.R <name>
.B file
.R <file>
.PP
cilo secret 
.B update
.R <name>
.B input
.PP
        Updates a local secret. Which can be taken from:
               Command Line Argument
               Input Filename
               Standard Input
.IP \[bu] 2
.B DELETE
.PP
cilo secret 
.B delete
.R <name>
.PP
        Deletes a secret by name.


