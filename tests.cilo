import com.cirrosoft.*
import com.google.common.collect.HashBiMap

step "Basic Step Form", {
    println "Basic Step Works. "
    assert 1 == 1
}

step("Alternate Step Form") {
    println "Alternate Step Works. "
    assert 1 == 1
}

step "Simple Shell", {
    $ echo "Simple from shell works. "
    assert 1 == 1
}

step "Mixed Shell", {
    println "Mixed from groovy works"
    $ echo "Mixed from shell works. "
    assert 1 == 1
}


step "Multiline Shell", {
    $ echo "Multiline:"
    $ echo "from-line1" \
    $      "from-line2" \
    $      "from-line3" \
}

step "Control Flow Shell", {
    $ ifStatement() {
    $   if $1; then
    $     echo "true"
    $   else
    $     echo "false"
    $   fi
    $ }
    $ ifStatement "true"
    $ ifStatement "false"
}

step "Shell Timing", {
    $ for i in `seq 1 10`; do
    $   sleep 0.1
    $   echo "Slept for $i second total."
    $ done
}

step "Shell Variable Access", {
    def variables = [
        "VAR_1":"groovy variable 1",
        "VAR_2":"groovy variable 2"
    ]
    env variables, {
        $ echo "Bash Var 1: $VAR_1"
        $ echo "Bash Var 2: $VAR_2"
    }
}

step "Shell Return Values", {
    $ echo "Some value from stdout."
    $ echo "Some value from stderr." 1>&2
    $ false
    println "STDOUT--: $stdOut"
    print   "STDERR--: $stdErr"
    println "EXITCODE: $exitCode (should be 1)"
    $ echo "Some other value from stdout."
    $ echo "Some other value from stderr." 1>&2
    $ true
    println "STDOUT--: $stdOut"
    print   "STDERR--: $stdErr"
    println "EXITCODE: $exitCode (should be 0)"
}

step "Variable Scope", {
    def outer = "Outer scope"
    def variables = [
        "VAR_1":"Groovy to shell variable",
    ]
    env variables, {
        def inner = "Inner scope"        
        println "Inner: ${outer}"
        println "Outer: ${inner}"
    }
}

step "Git Information", {
    println "Branch Name: ${git.branchName}"
    println "Commit Hash: ${git.commitHash}"
}

step "Groovy Secret", {
     secret "username", {
            println "Secret------: ${username}"
            println "Secret Text-: ${usernameText}"
            println "Secret Bytes: ${usernameBytes}"
            println "Secret File-: ${usernameFile}"
     }
}

step "Bash Secret", {
     secret "password", {
            $ echo "From shell-------Secret: $password"
            $ echo "From shell--Secret Text: $passwordText"
            $ echo "From shell-Secret Bytes: $passwordBytes"
            $ echo "From shell--Secret File: $passwordFile"
     }
}

step "Multiple Secrets", {
    secrets(["username", "password", "cirrosoftAwsServerTestAddress"]) {
            println "username: ${username}"
            println "password: ${usernameText}"
            println "cirrosoftAwsServerTestTddress: ${cirrosoftAwsServerTestAddress}"
    }
}

step "All Secrets", {
    secrets(["username", "password", "cirrosoftAwsServerTestAddress", "cirrosoftAwsPem"]) {
        println "Secret------: ${username}"
        println "Secret Text-: ${usernameText}"
        println "Secret Bytes: ${usernameBytes}"
        println "Secret File-: ${usernameFile}"
        $ echo "From shell-------Secret: $password"
        $ echo "From shell--Secret Text: $passwordText"
        $ echo "From shell-Secret Bytes: $passwordBytes"
        $ echo "From shell--Secret File: $passwordFile"
        println "cirrosoftAwsServerTestAddress------: ${cirrosoftAwsServerTestAddress}"
        println "cirrosoftAwsServerTestAddressBytes-: ${cirrosoftAwsServerTestAddressBytes}"
        println "cirrosoftAwsServerTestAddressText--: ${cirrosoftAwsServerTestAddressText}"
        println "cirrosoftAwsServerTestAddressFile--: ${cirrosoftAwsServerTestAddressFile}"
        println "cirrosoftAwsPem--------------------: ${cirrosoftAwsPem}"
        println "cirrosoftAwsPemBytes---------------: ${cirrosoftAwsPemBytes}"
        println "cirrosoftAwsPemText----------------: ${cirrosoftAwsPemText}"
        println "cirrosoftAwsPemFile----------------: ${cirrosoftAwsPemFile}"
    }
}


step "Nested Secrets", {
     secret "username", {
            secret "password", {
                   println "USERNAME: ${username}"
            $ echo "Password: ${password}"
            }
     }    
}

step "Secret Combined Variables", {
     def password = "itdoeswork86"
     secret "username", {
            println "Username from Secret--: $username"
            println "Password from Variable: $password"
     }    
}

step "Secret Scope", {
    def outer = "Outer scope"
    secret "username", {
        def inner = "Inner scope"
        println "Groovy Variable Outer: ${outer}"
        println "Groovy Variable Inner: ${inner}"
    }
}

step "Variable Scope Combos", {
    def innerVariables = [
        "VAR_INNER":"Groovy to shell inner variable",
    ]
    def outerVariables = [
        "VAR_OUTER":"Groovy to shell outer variable",
    ]
    def outer = "Outer scope"
    env outerVariables, {
        def middle1 = "Middle1 scope"
        secret "username", {
            def middle2 = "Middle2 scope"
            env innerVariables, {
                def middle3 = "Middle3 scope"
                secret "password", {
                    def inner = "Inner scope"
                    println "Groovy Variable Outer--: ${outer}"
                    println "Groovy Variable Middle1: ${middle1}"
                    println "Groovy Variable Middle2: ${middle2}"
                    println "Groovy Variable Middle3: ${middle3}"
                    println "Groovy Variable Inner--: ${inner}"
                    $ echo "Bash Var Inner-------: $VAR_INNER"
                    $ echo "Bash Var Outer-------: $VAR_OUTER"
                }
            }
        }
    }
}

step "Build Environment", {
    println "RUN_NUMBER: ${RUN_NUMBER}"
    println "BASH ENV:"
    $ env
}

step "Library Function", {
    def functions = new Functions()
    def string = functions.echoString("Cilo library works!")
    println string
}

step "Library Function w/ Integration", {
    def functions = new Functions()
    def string = functions.echoStringIntegrated("Cilo library with builtin integration works!")
    println string
}

step "Static Library Function", {
    def string = Functions.echoStringStatic("Static cilo library works!")
    println string
}

step "Static Library Function w/ Integration", {
    def string = Functions.echoStringStatic("Static cilo library with builtin integration works!")
    println string
}

step "Library Won't Call Instance Method from Static Class", {
    try {
        Functions.echoString("Instance cilo library call should not work statically:(")
    } catch (e) {
        println "SUCCESS - Instance method call failed from static class."
    }
}

step "Library Groovy Source", {
    CirroGroovy cirro = new CirroGroovy();
    cirro.printCirro()
}

step "Library Java Class", {
    CirroJava cirro = new CirroJava();
    cirro.printCirro()
}

step "Library Jar", {
    HashBiMap<String, String> capitalCountryBiMap = HashBiMap.create();
    capitalCountryBiMap.put("New Delhi", "India");
    capitalCountryBiMap.put("Washington, D.C.", "USA");
    capitalCountryBiMap.put("Moscow", "Russia");
    String russia = capitalCountryBiMap.get("Moscow")
    println "Moscow is the capital of ${russia}."
}

step "Groovy Secret 2", {
     secret "username", {
            println "Secret------: ${username}"
            println "Secret Text-: ${usernameText}"
            println "Secret Bytes: ${usernameBytes}"
            println "Secret File-: ${usernameFile}"
     }
}

step "Bash Secret 2", {
     secret "password", {
            $ echo "From shell-------Secret: $password"
            $ echo "From shell--Secret Text: $passwordText"
            $ echo "From shell-Secret Bytes: $passwordBytes"
            $ echo "From shell--Secret File: $passwordFile"
     }
}

step "SSH", {
    secrets(["cirrosoftAwsServerTestAddress", "cirrosoftAwsPem"]) {
        ssh("ec2-user@${cirrosoftAwsServerTestAddress}", "${cirrosoftAwsPemFile}") {
            $ uname -a
            $ env
        }
    }
}

